import java.util.*;

public class Solution {
    public static ArrayList<Integer> pancakeSort(ArrayList<Integer> arr, int n) {
        int numToFind = n;
        ArrayList<Integer> res = new ArrayList<>();

        while (!isSorted(arr)) {
            int i;
            for (i = 0; i < n; i++) {
                if (arr.get(i) == numToFind) {
                    break;
                }
            }

            if (numToFind == i + 1) {
                numToFind--;
                continue;
            } else if (i == 0) {
                res.add(numToFind);
                reverse(arr, 0, numToFind - 1);
                numToFind--;
            } else {
                res.add(i + 1);
                res.add(numToFind);
                reverse(arr, 0, i);
                reverse(arr, 0, numToFind - 1);
                numToFind--;
            }
        }

        return res;
    }

    private static boolean isSorted(ArrayList<Integer> arr) {
        for (int i = 0; i < arr.size() - 1; i++) {
            if (arr.get(i) > arr.get(i + 1)) {
                return false;
            }
        }
        return true;
    }

    private static void reverse(ArrayList<Integer> arr, int start, int end) {
        while (start < end) {
            int temp = arr.get(start);
            arr.set(start, arr.get(end));
            arr.set(end, temp);
            start++;
            end--;
        }
    }
}
